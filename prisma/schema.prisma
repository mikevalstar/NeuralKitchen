
generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  recipeVersions RecipeVersion[] @relation("RecipeVersionTags")
}

model Project {
  id             String          @id @default(uuid())
  title          String
  description    String?         @db.VarChar(300)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  shortId        String          @unique
  recipeVersions RecipeVersion[] @relation("RecipeVersionProjects")
}

model Recipe {
  id               String          @id @default(uuid())
  title            String
  shortId          String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  currentVersionId String?
  currentVersion   RecipeVersion?  @relation("CurrentRecipeVersion", fields: [currentVersionId], references: [id])
  versions         RecipeVersion[]
}

model RecipeVersion {
  id                String    @id @default(uuid())
  title             String
  shortId           String
  content           String
  versionId         String
  isCurrent         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  recipeId          String
  contentHash       String?
  versionNumber     Int
  aiSummary         String?
  comment           String?
  currentForRecipes Recipe[]  @relation("CurrentRecipeVersion")
  recipe            Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  projects          Project[] @relation("RecipeVersionProjects")
  tags              Tag[]     @relation("RecipeVersionTags")

  @@unique([recipeId, versionNumber])
}

model RecipeQueue {
  id          String    @id @default(uuid())
  title       String
  shortid     String
  versionId   String
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  deletedAt   DateTime?
  error       String?
  updatedAt   DateTime  @updatedAt
}

model VecDocument {
  id        Int                    @id @default(autoincrement())
  title     String
  shortid   String                 @unique
  embedding Unsupported("vector")?
  createdat DateTime?              @default(now()) @db.Timestamptz(6)
  updatedat DateTime?              @default(now()) @db.Timestamptz(6)
  deletedat DateTime?              @db.Timestamptz(6)
  versionId String?
  recipeId  String?
  isCurrent Boolean                @default(false)

  @@index([embedding])
}

model Prompt {
  id          String    @id @default(uuid())
  key         String    @unique
  name        String
  description String?
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
